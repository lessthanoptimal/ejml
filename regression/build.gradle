/*
 * Copyright (c) 2020, Peter Abeles. All Rights Reserved.
 *
 * This file is part of Efficient Java Matrix Library (EJML).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dependencies {
    compile project(':main:autocode')
    compile project(':main:ejml-all')
    compile project(':main:ejml-cdense').sourceSets.benchmarks.output
    compile project(':main:ejml-ddense').sourceSets.benchmarks.output
    compile project(':main:ejml-dsparse').sourceSets.benchmarks.output
    compile project(':main:ejml-fdense').sourceSets.benchmarks.output
    compile project(':main:ejml-fsparse').sourceSets.benchmarks.output
    compile project(':main:ejml-zdense').sourceSets.benchmarks.output

    ['core','generator-annprocess'].each { String a->
        compile('org.openjdk.jmh:jmh-'+a+':1.27')
    }

    compile group: 'args4j', name: 'args4j', version: '2.33'
    compile 'com.sun.mail:javax.mail:1.6.0'
}

// Run the regression using a gradle command
// Currently this is the only way to get paths set up for benchmarks. See comment below.
//
// Example: ./gradlew runtimeRegression -q -Dexec.args="--SummaryOnly"
task runtimeRegression(type: JavaExec) {
    dependsOn build
    group = "Execution"
    description = "Run the mainClass from the output jar in classpath with ExecTask"
    classpath = sourceSets.main.runtimeClasspath
    main = "org.ejml.RuntimeRegressionMasterApp"
    args System.getProperty("exec.args", "").split()
}

// Creating a jar would be easier to pass in arguments with, but it seems like only the first
// META-INF/BenchmarkList it sees is used. This limited the benchmarks to one module
//task runtimeRegressionJar(type: Jar, dependsOn: project.compileJava ) {
//    manifest {
//        attributes 'Implementation-Title': 'Runtime Regression Jar',
//                'Implementation-Version': project.version,
//                'Main-Class': 'org.ejml.RuntimeRegressionMasterApp'
//    }
//
//    outputs.upToDateWhen { false }
//
//    from sourceSets.main.output
//
//    dependsOn configurations.runtimeClasspath
//    from { configurations.runtimeClasspath.findAll{it.exists() }.collect {
//        it.name.endsWith('jar') ? zipTree(it) : it } } {
//        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
//    }
//
//    doLast { archivePath.renameTo(file('../runtime_regression.jar')) }
//}